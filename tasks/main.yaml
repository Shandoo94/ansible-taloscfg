- name: Generate Talos machineconfig
  when: taloscfg_server_group in group_names or taloscfg_worker_group in group_names
  connection: local
  block:
    - name: Ensure generated directory exists
      ansible.builtin.file:
        path: "{{ taloscfg_target_dir }}/{{ taloscfg_cluster_name }}"
        state: directory
        mode: "0700"
      run_once: true

    - name: Write decrypted secrets to a temporary file
      ansible.builtin.copy:
        content: "{{ lookup('ansible.builtin.file', taloscfg_secrets_file) }}"
        dest: "{{ taloscfg_secrets_file_decrypted }}"
        mode: "0600"
      run_once: true
      no_log: true

    - name: Get installer image ID
      ansible.builtin.uri:
        url: "https://factory.talos.dev/schematics"
        method: POST
        body: "{{ taloscfg_talos_image_schematic | to_yaml }}"
        body_format: "raw"
        headers:
          Content-Type: "application/x-yaml"
        return_content: yes
        status_code: [200, 201]
      register: taloscfg_schematic_response
      run_once: true

    - name: Download installer ISO
      ansible.builtin.get_url:
        url: "https://factory.talos.dev/image/{{ taloscfg_schematic_response.json.id }}/{{ taloscfg_talos_version }}/{{ taloscfg_talos_image_type }}-amd64.iso"
        dest: "{{ taloscfg_target_dir }}/{{ taloscfg_schematic_response.json.id }}-{{ taloscfg_talos_version }}-{{ taloscfg_talos_image_type }}-amd64.iso"
        mode: "0644"
      run_once: true

    - name: Include tasks to create vIP
      when:
        - taloscfg_server_group is in group_names
        - taloscfg_api_use_vip
      ansible.builtin.include_tasks: ha.yaml

    - name: Include tasks to create cilium patch
      when: taloscfg_use_cilium_cni
      ansible.builtin.include_tasks: cilium.yaml

    - name: Include tasks to generate raw volume patches
      when: taloscfg_rawVolume_list | length > 0
      ansible.builtin.include_tasks: raw_vol.yaml

    - name: Render machineconfig
      vars:
        taloscfg_patch_flag: >-
          {% if taloscfg_server_group in group_names %}
            --config-patch-control-plane
          {% else %}
            --config-patch-worker
          {% endif %}
        taloscfg_output_type: >-
          {% if taloscfg_server_group in group_names %}
            --output-types controlplane
          {% else %}
            --output-types worker
          {% endif %}
        taloscfg_patch_args: >-
          {% for patch in taloscfg_common_patches %}
            {{ taloscfg_patch_flag }} @{{ patch }}
          {% endfor %} {% for patch in taloscfg_machine_patches %}
            {{ taloscfg_patch_flag }} @{{ patch }}
          {% endfor %} {% if taloscfg_server_group in group_names %}
            {% for patch in taloscfg_common_server_patches %}
              {{ taloscfg_patch_flag }} @{{ patch }}
            {% endfor %}
          {% else %}
            {% for patch in taloscfg_common_worker_patches %}
              {{ taloscfg_patch_flag }} @{{ patch }}
            {% endfor %}
          {% endif %}
        taloscfg_installer_arg: >-
          --config-patch '[{"op": "add", "path": "/machine/install/image", "value": "factory.talos.dev/{{ taloscfg_talos_image_type }}-installer/{{ taloscfg_schematic_response.json.id }}:{{ taloscfg_talos_version }}"}]'
        taloscfg_hostname_arg: >-
          --config-patch '[{"op": "add", "path": "/machine/network/hostname", "value": "{{ inventory_hostname }}"}]'
      ansible.builtin.command: >-
        talosctl gen config {{ taloscfg_cluster_name }}
        https://{{ taloscfg_api_endpoint_cidr | ansible.utils.ipaddr('ip') }}:{{ taloscfg_api_endpoint_port }}
        --force
        --with-secrets {{ taloscfg_secrets_file_decrypted }}
        --kubernetes-version {{ taloscfg_kubernetes_version }}
        --talos-version {{ taloscfg_talos_version }}
        {{ taloscfg_hostname_arg }}
        {{ taloscfg_patch_args }}
        {{ taloscfg_installer_arg }}
        {{ taloscfg_output_type }}
        {{ taloscfg_vip_arg | default("") }}
        {{ taloscfg_cilium_arg | default("") }}
        {{ taloscfg_rawVolume_arg | default("") }}
        -o -
      register: talosctl_machineconfig
      changed_when: false
      no_log: true

    - name: Write machineconfig
      ansible.builtin.copy:
        content: "{{ talosctl_machineconfig.stdout }}"
        dest: "{{ taloscfg_target_dir }}/{{ taloscfg_cluster_name }}/{{ inventory_hostname }}.yaml"
        mode: "0600"
      no_log: true

    - name: Render taloscfg
      ansible.builtin.command: >-
        talosctl gen config {{ taloscfg_cluster_name }}
        https://{{ taloscfg_api_endpoint_cidr | ansible.utils.ipaddr('ip') }}:{{ taloscfg_api_endpoint_port }}
        --force
        --with-secrets {{ taloscfg_secrets_file_decrypted }}
        --kubernetes-version {{ taloscfg_kubernetes_version }}
        --talos-version {{ taloscfg_talos_version }}
        --output-types talosconfig
        -o -
      register: talosctl_taloscfg
      changed_when: false
      run_once: true
      no_log: true

    - name: Write taloscfg
      ansible.builtin.copy:
        content: "{{ talosctl_taloscfg.stdout }}"
        dest: "{{ taloscfg_target_dir }}/{{ taloscfg_cluster_name }}/{{ taloscfg_cluster_name }}.yaml"
        mode: "0600"
      run_once: true
      no_log: true
  always:
    - name: Clean up decrypted secrets
      ansible.builtin.file:
        path: "{{ taloscfg_secrets_file_decrypted }}"
        state: absent
      run_once: true

    - name: Clean up generated patches
      ansible.builtin.file:
        path: "{{ taloscfg_target_dir }}/{{ item }}"
        state: absent
      loop:
        - patch-cilium.yaml
        - patch-vip.yaml
        - patch-rawVolume.yaml
      run_once: true
